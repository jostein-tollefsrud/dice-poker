import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { getResult } from '../lib/getResult';

interface PointsProps {
  name?: string;
  point: number;
}

const INITIAL_DICES = [
  {
    id: 0,
    value: 0,
    hold: false,
  },
  {
    id: 1,
    value: 0,
    hold: false,
  },
  {
    id: 2,
    value: 0,
    hold: false,
  },
  {
    id: 3,
    value: 0,
    hold: false,
  },
  {
    id: 4,
    value: 0,
    hold: false,
  },
];

const Home: NextPage = () => {
  const [p1Dices, setP1Dices] = useState([...INITIAL_DICES]);
  const [p2Dices, setP2Dices] = useState([...INITIAL_DICES]);

  const [p1Coins, setP1Coins] = useState(30);
  const [p2Coins, setP2Coins] = useState(30);

  const [p1Bid, setP1Bid] = useState(0);
  const [p2Bid, setP2Bid] = useState(0);

  const [p1Rolls, setP1Rolls] = useState(0);
  const [p2Rolls, setP2Rolls] = useState(0);

  const [p1Points, setP1Points] = useState<PointsProps>({ point: 0 });
  const [p2Points, setP2Points] = useState<PointsProps>({ point: 0 });

  const [pot, setPot] = useState(0);
  const [round, setRound] = useState(0);
  const [winner, setWinner] = useState('');

  const startGame = () => {
    setRound(1);
    // setPot(2);
    // setP1Coins(29);
    // setP2Coins(29);
  };

  const throwDiceP1 = () => {
    if (p1Rolls < 2) {
      let newArr = p1Dices.map((item) => {
        const value = item.hold
          ? item.value
          : Math.floor(Math.random() * 6 + 1);

        return { ...item, value };
      });
      setP1Dices(newArr);
      setP1Rolls((prevState) => prevState + 1);
    }
  };

  const throwDiceP2 = () => {
    if (p2Rolls < 2) {
      let newArr = p2Dices.map((item) => {
        const value = item.hold
          ? item.value
          : Math.floor(Math.random() * 6 + 1);

        return { ...item, value };
      });
      setP2Dices(newArr);
      setP2Rolls((prevState) => prevState + 1);
    }
  };

  useEffect(() => {
    const resultP1 = getResult(p1Dices);
    setP1Points(resultP1);

    const resultP2 = getResult(p2Dices);
    setP2Points(resultP2);

    /**
     * Sjekk hvem som har høyest score
     */
    if (p1Rolls === 2 && p2Rolls === 2) {
      if (p1Points.point > p2Points.point) {
        setWinner('Spiller 1 vant!');
      } else {
        setWinner('Spiller 2 vant!');
      }
    }
  }, [p1Dices, p2Dices, p1Points.point, p2Points.point, p1Rolls, p2Rolls]);

  const newRound = () => {
    setP1Rolls(0);
    setP2Rolls(0);
    setP1Dices([...INITIAL_DICES]);
    setP2Dices([...INITIAL_DICES]);
    setWinner('');
    setRound((prev) => prev + 1);
  };

  /**
   * Markerer en terning som ikke skal kastes på nytt
   */
  const holdDiceP1 = (index: number) => {
    let newArr = p1Dices.map((item, i) => {
      if (index === i) {
        return { ...item, hold: !p1Dices[index].hold };
      } else {
        return item;
      }
    });
    setP1Dices(newArr);
  };

  const holdDiceP2 = (index: number) => {
    let newArr = p2Dices.map((item, i) => {
      if (index === i) {
        return { ...item, hold: !p2Dices[index].hold };
      } else {
        return item;
      }
    });
    setP2Dices(newArr);
  };

  return (
    <div>
      <Head>
        <title>Dice Poker</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      {round === 0 && (
        <button className='btn' onClick={() => startGame()}>
          Start spill
        </button>
      )}

      {round > 0 && (
        <main>
          <p>Runde: {round}</p>
          <p>Pot: {pot}</p>

          <section className='player'>
            <h2>Spiller 1</h2>
            <p>evCoin: {p1Coins}</p>
            {p1Points.point > 0 && <p>{p1Points.name}</p>}

            <div className='dices'>
              {p1Dices.map((dice: any, index: number) => (
                <button
                  key={dice.id}
                  onClick={() => holdDiceP1(index)}
                  // style={{ borderColor: dice.hold ? 'red' : 'black' }}
                  className={`dice ${dice.hold && 'select'}`}
                >
                  {dice.value}
                </button>
              ))}
            </div>
            <button
              className='btn'
              onClick={() => throwDiceP1()}
              disabled={p1Rolls >= 2}
            >
              Kast terninger
            </button>
          </section>

          <section className='player'>
            <h2>Spiller 2</h2>
            <p>evCoin: {p2Coins}</p>
            {p2Points.point > 0 && <p>{p2Points.name}</p>}

            <div className='dices'>
              {p2Dices.map((dice: any, index: number) => (
                <button
                  key={dice.id}
                  onClick={() => holdDiceP2(index)}
                  // style={{ borderColor: dice.hold ? 'red' : 'black' }}
                  className={`dice ${dice.hold && 'select'}`}
                >
                  {dice.value}
                </button>
              ))}
            </div>
            <button
              className='btn'
              onClick={() => throwDiceP2()}
              disabled={p2Rolls >= 2}
            >
              Kast terninger
            </button>
          </section>
          <p>{winner}</p>
          {p1Rolls === 2 && p2Rolls === 2 && (
            <button onClick={() => newRound()}>Ny runde</button>
          )}
        </main>
      )}
    </div>
  );
};

export default Home;
